import Color from 'color';
import { adjustHue } from './adjustHue';

export interface HueShiftPaletteOptions {
  baseColor: Color;
  minLuminosity: number;
  maxLuminosity: number;
  step: number;
}

/**
 * Shifts a value `n` from the range [start1, end1] to the range [start2, end2]
 * by linear interpolation.
 *
 * @param n The value to shift.
 * @param start1 The start of the initial range.
 * @param end1 The end of the initial range.
 * @param start2 The start of the target range.
 * @param end2 The end of the target range.
 * @returns The shifted value.
 */
const shiftLuminosity = (
  n: number,
  start1: number,
  end1: number,
  start2: number,
  end2: number
) => {
  return ((n - start1) / (end1 - start1)) * (end2 - start2) + start2;
};

/**
 * Generates a palette of colors by shifting the hue and luminosity of a base
 * color.
 *
 * @param options - An object with the following properties:
 *   baseColor: The base color to generate the palette from.
 *   minLuminosity: The minimum luminosity of the generated colors.
 *   maxLuminosity: The maximum luminosity of the generated colors.
 *   step: The amount to shift the hue by for each color in the palette.
 * @returns An array of colors. The first color is the base color, and the
 * remaining colors are generated by shifting the hue and luminosity. The
 * colors are arranged in the order of darkest to lightest.
 */
export const createHueShiftPalette = ({
  baseColor,
  minLuminosity,
  maxLuminosity,
  step,
}: HueShiftPaletteOptions) => {
  const result = [baseColor];

  for (let i = 1; i < 5; i++) {
    const hueDark = adjustHue(baseColor.hue() - step * i);
    const hueLight = adjustHue(baseColor.hue() + step * i);
    const lightnessDark = shiftLuminosity(
      i,
      0,
      4,
      baseColor.l(),
      minLuminosity
    );
    const lightnessLight = shiftLuminosity(
      i,
      0,
      4,
      baseColor.l(),
      maxLuminosity
    );

    result.push(Color.lch(lightnessDark, baseColor.chroma(), hueDark));

    result.unshift(Color.lch(lightnessLight, baseColor.chroma(), hueLight));
  }
  return result;
};
